{% extends "base.jinja" %}

{% block head_content %}
	<script src="/static/bower_components/ruleJS/dist/full/ruleJS.all.full.js"></script>
	<script src="/static/bower_components/handsontable/dist/handsontable.full.js"></script>
	<script src="/static/js/handsontable.formulas.js"></script>
<link rel="stylesheet" media="screen" href="/static/bower_components/handsontable/dist/handsontable.full.css">
{% endblock %}

{% block page_content %}

<h2>Step 2: Review data and copy into database</h2>

{% if edata_obj %}
<p>We have extracted the data from page {{edata_obj.metadata['source_pagenum']}} of the document "<i>{{edata_obj.document.description}}</i>"</b>

<p>Please copy appropriate information from here into the table at the bottom. When you have finished, click the button at the bottom to upload it into the Openoil database.</p>

<p>You may also wish to <a href="{{edata_obj.document.source_url}}" target="_blank">consult the original document</a></p>
{% endif %}

<h3>Data Extracted from PDF</h3>
<div id="extracted_data"></div>

<h3>Add the correct data here</h3>

<input type="submit" value="Upload Data" class="submit_sheet"/>

<div id="tabs">
  <ul>
      <li><a href="#tabs-1">Production</a></li>
	  
    <li><a href="#tabs-2">Reserves</a></li>
    <li><a href="#tabs-3">Costs</a></li>
	<li><a href="#tabs-4">Other Data</a></li>
  </ul>
  <div id="tabs-1">
<div id="output_production"></div>
  </div>
  <div id="tabs-2">
	  <div id="output_reserves"></div>
  </div>
  <div id="tabs-3">
	  <div id="output_costs"></div>
  </div>
  <div id="tabs-4">
	  <div id="output_extra_information"></div>
  </div>
</div>


<script>

$(document).ready(function(){
	$('#tabs').tabs();
	})

// extracted data
var edata = {{ edata_json | safe }};

var headers_production = {{ headers_production|safe }};
var headers_reserves = {{ headers_reserves|safe }};
var headers_costs = {{ headers_costs|safe }};
var headers_extra_information = {{ headers_extra_information|safe }};

var autocomplete_production = {{ autocomplete_production | safe }};
var autocomplete_reserves = {{ autocomplete_reserves | safe }};
var autocomplete_costs = {{ autocomplete_costs | safe }};
var autocomplete_extra_information = {{ autocomplete_extra_information | safe }};

var autocomplete_companies = {{ autocomplete_companies | safe }};
var autocomplete_projects = {{ autocomplete_projects | safe }};



var render_firstrow = function(instance,td,row,col,prop,value,cellProperties){
    Handsontable.renderers.TextRenderer.apply(this,arguments); // ??? - cargo-culted from the docs
    td.style.fontWeight = 'bold';
    td.style.background = '#bbbbbb';
}

var ed_hot = new Handsontable(document.getElementById('extracted_data'), {
    data: edata['data'],
    minSpareRows: 1,
    rowHeaders: true,
    colHeaders: true,
	contextMenu: true,
    formulas: true});

var make_hot = function(data, label, element, autocomplete){
	colheaders = data[0].slice();
	var hot = new Handsontable(element, {
	  data: data,
	  minSpareRows: 10,
	  minSpareCols: 5,
	  colWidths: 160,
	  formulas: true,
	  beforeChange: function(changes, source){
		  // convert number-strings like "42,000" into numbers
		  // on numeric columns only

		  for(i in changes){
			  change = changes[i] // [row,column, 'before', 'after']		  
			  if(this.getCellMeta(change[0], change[1])['type'] == 'numeric'){
				  // numeral.js turns non-numeric input into 0
				  // so we turn 0s back into the original string
				  // (which just means a pointless round-trip if the input
				  // really is 0)
				  change[3] = numeral(change[3]).value() || change[3];
				  }
		  }
	  },

	  rowHeaders: true,
	  colHeaders: true,
		contextMenu: true,
		cells: function(row, col, prop){
		var cellProperties = {};
		if(row==0){
			cellProperties.renderer = render_firstrow;
			if(colheaders[col]){ // this is one of the original columns
				cellProperties.readOnly = true;
				}
		}
		else if(col==0){
			cellProperties.type = 'autocomplete';
			cellProperties.source = autocomplete_projects;
			cellProperties.strict = false;
		}
		else if(col==1){
			cellProperties.type = 'autocomplete';
			cellProperties.source = autocomplete_companies;
			cellProperties.strict = false;
		}
		else{
			if(data[0][col]){
				header = data[0][col].toLowerCase();
				}
			if(autocomplete[header]){
			cellProperties.type = 'autocomplete';
			cellProperties.source = autocomplete[header];
			cellProperties.strict = false;

			}
			numeric_fields = ['level',];
			if(numeric_fields.indexOf(header) > -1){
			    cellProperties.type = 'numeric';
			    cellProperties.format = '0,0.00';

			}

		}

		return cellProperties
		}

	});
	return hot;
	}
var hot_production = make_hot(headers_production, 'production', document.getElementById('output_production'), autocomplete_production);
var hot_reserves = make_hot(headers_reserves, 'reserves', document.getElementById('output_reserves'), autocomplete_reserves);
var hot_costs = make_hot(headers_costs, 'costs', document.getElementById('output_costs'), autocomplete_costs);
var hot_extra_information = make_hot(headers_extra_information, 'extra_information', document.getElementById('output_extra_information'), autocomplete_extra_information);


var LOCKS=0;



var save_contents = function(_table, label){
	LOCKS += 1;
    console.log('save_contents');
    data_for_post = {
	    'metadata': JSON.stringify(
		{'type': label,

		 {% if edata_obj %}
		 'edata_id': {{edata_obj.id}},
		 {% endif %}

		 
		}),
	    'tabledata': JSON.stringify(_table.getData()),
	    'csrfmiddlewaretoken': '{{csrf_token}}',
	};
	

    $.ajax({
	'url': '/data/add/json/',
	'type': 'POST',
	'data': data_for_post,
	'success': function(json){
		LOCKS -= 1;
		if(LOCKS == 0){
			window.location.href="/data/add/queue";
			}
		}
    });    
};

$('.submit_sheet').click(function(){
	LOCKS += 1;
	save_contents(hot_production, 'production');
	save_contents(hot_reserves, 'reserves');
	save_contents(hot_costs, 'costs');
	save_contents(hot_extra_information, 'extra_information');
	LOCKS -= 1;
});


</script>


{% endblock %}
